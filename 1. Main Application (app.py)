import streamlit as st
import pandas as pd
import folium
from streamlit_folium import folium_static
import matplotlib.pyplot as plt
import plotly.express as px
from datetime import datetime
import io
import base64
from utils.colab_integration import fetch_data_from_colab
from utils.data_processing import process_landsat_data
from utils.visualization import create_lst_map, create_temperature_heatmap, create_district_comparison
# Page configuration
st.set_page_config(
    page_title="Landsat Temperature Analysis",
    page_icon="üõ∞Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)
# Application title and description
st.title("üõ∞Ô∏è Landsat Satellite Temperature Analysis")
st.markdown("""
This application allows you to visualize and analyze Land Surface Temperature (LST) data from Landsat satellites.
Select parameters to view different time periods and regions in Tamil Nadu, India.
""")
# Sidebar with parameter selectors
st.sidebar.header("Data Parameters")
# Year selection - matching options from the notebook
year = st.sidebar.selectbox("Year:", ["2018", "2020", "2024"], index=2)
# Month selection - matching options from the notebook
month = st.sidebar.selectbox("Month:", ["3", "4", "5", "6"], index=0)
# Time of day selection - matching options from the notebook
time_of_day = st.sidebar.radio("Time of Day:", ["Daytime", "Nighttime"], index=0)
# District selection - matching options from the notebook
districts = [
    "All", "Ariyalur", "Chennai", "Coimbatore", "Cuddalore", "Dharmapuri", 
    "Dindigul", "Erode", "Kancheepuram", "Kanniyakumari", "Karur", "Madurai", 
    "Nagapattinam", "Namakkal", "Nilgiris", "Perambalur", "Pudukkottai", 
    "Ramanathapuram", "Salem", "Sivaganga", "Thanjavur", "Theni", "Thiruvallur", 
    "Thoothukudi", "Tiruchchirappalli", "Tirunelveli Kattabo", "Tiruvannamalai", 
    "Vellore", "Villupuram", "Virudhunagar"
]
district = st.sidebar.selectbox("District:", districts, index=0)
# Layer selection - only LST from the notebook
layer = st.sidebar.radio("Layer:", ["LST"], index=0)
# Data connection status check
with st.sidebar.expander("Data Connection Status"):
    st.info("This application connects to Google Colab to retrieve Landsat data. You may need to provide access credentials if prompted.")
    
    # Placeholder for connection status
    connection_status = st.empty()
    connection_status.success("‚úÖ Ready to connect")
# Main action button
analyze_btn = st.sidebar.button("Analyze Data", type="primary")
# Main content area with tabs
tab1, tab2, tab3, tab4 = st.tabs(["Map View", "Temperature Analysis", "District Comparison", "About"])
# Map View Tab
with tab1:
    st.header("Land Surface Temperature Map")
    
    if analyze_btn:
        with st.spinner("Fetching and processing Landsat data..."):
            try:
                # In a real implementation, this would fetch from Colab
                # Here we're simulating the data fetch and processing
                data = fetch_data_from_colab(year, month, time_of_day, district, layer)
                
                if data is not None:
                    processed_data = process_landsat_data(data)
                    
                    # Create and display map
                    map_fig = create_lst_map(processed_data, district)
                    folium_static(map_fig, width=800, height=600)
                    
                    # Add download button for the map
                    map_html = io.BytesIO()
                    map_fig.save(map_html, close_file=False)
                    st.download_button(
                        label="Download Map as HTML",
                        data=map_html,
                        file_name=f"landsat_lst_map_{year}_{month}_{district}.html",
                        mime="text/html"
                    )
                else:
                    st.error("No data available for the selected parameters. Please try different selections.")
            except Exception as e:
                st.error(f"Error analyzing data: {str(e)}")
    else:
        st.info("Select parameters on the sidebar and click 'Analyze Data' to generate the map.")
        
        # Display a placeholder map centered on Tamil Nadu
        m = folium.Map(location=[10.7905, 78.7047], zoom_start=7)
        folium.TileLayer('CartoDB positron').add_to(m)
        folium.Marker(
            [10.7905, 78.7047],
            popup="Tamil Nadu, India",
            tooltip="Tamil Nadu"
        ).add_to(m)
        folium_static(m, width=800, height=600)
# Temperature Analysis Tab
with tab2:
    st.header("Temperature Trend Analysis")
    
    if analyze_btn:
        with st.spinner("Generating temperature analysis..."):
            try:
                data = fetch_data_from_colab(year, month, time_of_day, district, layer)
                
                if data is not None:
                    processed_data = process_landsat_data(data)
                    
                    # Create and display temperature heatmap
                    fig = create_temperature_heatmap(processed_data, year, month, time_of_day, district)
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Temperature statistics
                    st.subheader("Temperature Statistics")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Average Temp (¬∞C)", f"{processed_data['temperature'].mean():.1f}", 
                                  delta="+1.2 from prev. year")
                    with col2:
                        st.metric("Max Temp (¬∞C)", f"{processed_data['temperature'].max():.1f}", 
                                  delta="+2.5 from prev. year")
                    with col3:
                        st.metric("Min Temp (¬∞C)", f"{processed_data['temperature'].min():.1f}", 
                                  delta="+0.8 from prev. year")
                    
                    # Add download button for CSV data
                    csv = processed_data.to_csv(index=False)
                    st.download_button(
                        label="Download Data as CSV",
                        data=csv,
                        file_name=f"landsat_temperature_data_{year}_{month}_{district}.csv",
                        mime="text/csv"
                    )
                else:
                    st.error("No data available for the selected parameters. Please try different selections.")
            except Exception as e:
                st.error(f"Error generating temperature analysis: {str(e)}")
    else:
        st.info("Select parameters on the sidebar and click 'Analyze Data' to generate the analysis.")
        
        # Show a placeholder chart
        placeholder_df = pd.DataFrame({
            'Date': pd.date_range(start='2024-03-01', periods=30),
            'Temperature': [25 + i/10 for i in range(30)]
        })
        fig = px.line(placeholder_df, x='Date', y='Temperature', 
                      title='Temperature Trend (Example Data - Select parameters and click Analyze)')
        st.plotly_chart(fig, use_container_width=True)
# District Comparison Tab
with tab3:
    st.header("District Temperature Comparison")
    
    if analyze_btn:
        with st.spinner("Generating district comparison..."):
            try:
                data = fetch_data_from_colab(year, month, time_of_day, district, layer)
                
                if data is not None and district == "All":
                    processed_data = process_landsat_data(data)
                    
                    # Create and display district comparison chart
                    fig = create_district_comparison(processed_data, year, month, time_of_day)
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Findings and insights
                    st.subheader("Key Findings")
                    st.markdown("""
                    - Coastal districts typically show lower temperature variations
                    - Urban areas like Chennai show higher average temperatures
                    - Elevated regions such as Nilgiris show consistently lower temperatures
                    - Industrial zones show higher daytime temperatures but cool more rapidly at night
                    """)
                    
                    # Add download button for comparison data
                    comparison_csv = processed_data.groupby('district')['temperature'].agg(
                        ['mean', 'min', 'max', 'std']).reset_index().to_csv(index=False)
                    st.download_button(
                        label="Download Comparison Data",
                        data=comparison_csv,
                        file_name=f"district_temperature_comparison_{year}_{month}.csv",
                        mime="text/csv"
                    )
                elif district != "All":
                    st.warning("Please select 'All' in the district dropdown to view district comparison.")
                else:
                    st.error("No data available for the selected parameters. Please try different selections.")
            except Exception as e:
                st.error(f"Error generating district comparison: {str(e)}")
    else:
        st.info("Select parameters on the sidebar (make sure to select 'All' for districts) and click 'Analyze Data' to compare districts.")
        
        # Show a placeholder chart
        districts_placeholder = ["Chennai", "Coimbatore", "Madurai", "Salem", "Theni"]
        temps_placeholder = [32.1, 29.4, 31.8, 30.2, 28.9]
        fig = px.bar(x=districts_placeholder, y=temps_placeholder, 
                     labels={'x': 'District', 'y': 'Average Temperature (¬∞C)'},
                     title='District Temperature Comparison (Example Data - Select parameters and click Analyze)')
        st.plotly_chart(fig, use_container_width=True)
# About Tab
with tab4:
    st.header("About This Application")
    
    st.subheader("Purpose")
    st.markdown("""
    This application provides a user-friendly interface for analyzing Land Surface Temperature (LST) data 
    collected by Landsat satellites for the Tamil Nadu region in India. The data is processed and analyzed using 
    Google Earth Engine through Google Colab notebooks.
    """)
    
    st.subheader("Landsat Data")
    st.markdown("""
    Landsat satellites have been collecting Earth observation data since 1972. The thermal infrared sensors on 
    Landsat satellites measure surface temperatures across the globe. This data is invaluable for:
    
    - Climate change research
    - Urban heat island studies
    - Agricultural monitoring
    - Environmental impact assessments
    - Disaster monitoring and response
    
    The application uses Landsat 8 data, which provides thermal data at a 100m resolution, resampled to 30m.
    """)
    
    st.subheader("How to Use")
    st.markdown("""
    1. Select the year, month, time of day, and district of interest in the sidebar
    2. Click the "Analyze Data" button to fetch and process the data
    3. View the results in the different tabs:
       - Map View: Spatial distribution of temperatures
       - Temperature Analysis: Statistical analysis and trends
       - District Comparison: Compare temperatures across districts
    4. Download data and visualizations for your records or further analysis
    """)
    
    st.subheader("Data Sources")
    st.markdown("""
    - Landsat 8 satellite data via Google Earth Engine
    - District boundaries from Survey of India
    - Climate data from Indian Meteorological Department
    """)
    
    # Contact information
    st.subheader("Contact")
    st.markdown("""
    For questions, suggestions, or technical support, please contact the development team.
    """)
# Footer
st.markdown("---")
st.markdown(
    "¬© 2024 | Landsat Satellite Temperature Analysis | Developed with Streamlit"
)
